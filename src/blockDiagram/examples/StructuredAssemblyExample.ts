/**
 * Example demonstrating the structured assembly output
 * Shows how the compiler generates:
 * 1. Header comment
 * 2. EQU declarations
 * 3. MEM declarations
 * 4. Initialization section
 * 5. Main code
 */

import { BlockGraph } from '../types/Graph.js';
import { GraphCompiler } from '../compiler/GraphCompiler.js';
import { blockRegistry } from '../blocks/BlockRegistry.js';

// Create a simple graph: ADCL -> Gain -> Delay -> DACL
const exampleGraph: BlockGraph = {
    version: '1.0',
    metadata: {
        name: 'Simple Delay Effect',
        description: 'Demonstrates structured assembly generation',
        author: 'Block Diagram Editor',
        version: '1.0.0'
    },
    canvas: {
        zoom: 1.0,
        panX: 0,
        panY: 0
    },
    blocks: [
        {
            id: 'input1',
            type: 'input.adcl',
            position: { x: 100, y: 100 },
            parameters: {}
        },
        {
            id: 'pot1',
            type: 'input.pot',
            position: { x: 100, y: 200 },
            parameters: {
                potNumber: 0,
                invert: false
            }
        },
        {
            id: 'gain1',
            type: 'math.gain',
            position: { x: 300, y: 100 },
            parameters: {
                gain: 0.8
            }
        },
        {
            id: 'delay1',
            type: 'fx.delay',
            position: { x: 500, y: 100 },
            parameters: {
                maxDelayTime: 0.5,
                delayTime: 0.25,
                feedback: 0.6,
                mix: 0.5
            }
        },
        {
            id: 'output1',
            type: 'output.dacl',
            position: { x: 700, y: 100 },
            parameters: {
                gain: 1.0
            }
        }
    ],
    connections: [
        {
            id: 'conn1',
            from: { blockId: 'input1', portId: 'out' },
            to: { blockId: 'gain1', portId: 'in' }
        },
        {
            id: 'conn2',
            from: { blockId: 'pot1', portId: 'out' },
            to: { blockId: 'gain1', portId: 'gain_ctrl' }
        },
        {
            id: 'conn3',
            from: { blockId: 'gain1', portId: 'out' },
            to: { blockId: 'delay1', portId: 'in' }
        },
        {
            id: 'conn4',
            from: { blockId: 'delay1', portId: 'out' },
            to: { blockId: 'output1', portId: 'in' }
        }
    ]
};

// Compile the graph
const compiler = new GraphCompiler(blockRegistry);
const result = compiler.compile(exampleGraph);

if (result.success && result.assembly) {
    console.log('=== Generated Assembly ===\n');
    console.log(result.assembly);
    console.log('\n=== Statistics ===');
    console.log(`Instructions: ${result.statistics?.instructionsUsed}/128`);
    console.log(`Registers: ${result.statistics?.registersUsed}/32`);
    console.log(`Memory: ${result.statistics?.memoryUsed}/32768 words`);
    console.log(`Blocks: ${result.statistics?.blocksProcessed}`);
} else {
    console.error('Compilation failed:');
    result.errors?.forEach(err => console.error(`  - ${err}`));
}

/**
 * Expected output structure:
 * 
 * ;================================================================================
 * ; Simple Delay Effect
 * ; Demonstrates structured assembly generation
 * ; Author: Block Diagram Editor
 * ; Generated by FV-1 Block Diagram Editor
 * ;================================================================================
 * 
 * ; EQU Declarations
 * ;--------------------------------------------------------------------------------
 * equ  kpotflt    0.001
 * equ  kpothx     -0.75
 * equ  kpotmix    0.75
 * 
 * ; Memory Allocations
 * ;--------------------------------------------------------------------------------
 * mem  mem_delay1  16384
 * 
 * ; Main Program
 * ;--------------------------------------------------------------------------------
 * ; Left ADC Input
 * rdax ADCL, 1.0
 * wrax REG0, 0.0
 * 
 * ; Potentiometer 0
 * ; POT filtering a-la-SpinCAD
 * rdax POT0, 1.0
 * rdfx REG31, kpotflt
 * wrhx REG31, kpothx
 * rdax REG1, kpotmix
 * wrax REG1, 0.0  ; Write to output
 * 
 * ; Gain Block
 * ; Gain modulated by REG1 (base: 0.8)
 * rdax REG0, 1.0
 * mulx REG1  ; Apply CV control
 * wrax REG2, 0.0
 * 
 * ; Delay Effect (0.25s base, max 0.5s)
 * ; Memory: mem_delay1 @ 0 (16384 samples)
 * rdax REG2, 1.0
 * rda mem_delay1 + 8192, 1.0
 * sof 0.5, 0.0  ; Apply wet mix
 * wrax REG31, 1.0  ; Save wet, keep in ACC
 * rdax REG2, 1.0
 * sof 0.6, 0.0  ; Apply feedback
 * wra mem_delay1, 0.0  ; Write to delay line
 * rdax REG31, 1.0  ; Get wet signal
 * rdax REG2, 0.5  ; Add dry signal
 * wrax REG3, 0.0
 * 
 * ; Left DAC Output
 * rdax REG3, 1.0
 * wrax DACL, 0.0
 */
